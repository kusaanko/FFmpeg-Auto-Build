name: Build ffmpeg

on:
  workflow_dispatch:

jobs:
  build_ffmpeg:
    name: Build ffmpeg
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        target: [win32,win64] #win32 , win64 or multi
        variant: [gpl-static-shared,lgpl-static-shared] #gpl or lgpl, -static or -shared
        version: [none,n4.3.1] #none or version(tag)
    steps:
      - name: Preparing build
        run: |
          echo deb http://archive.ubuntu.com/ubuntu bionic main universe multiverse restricted | sudo tee /etc/apt/sources.list
          echo deb http://security.ubuntu.com/ubuntu/ bionic-security main multiverse universe restricted | sudo tee -a /etc/apt/sources.list
          echo deb http://archive.ubuntu.com/ubuntu bionic-updates main multiverse universe restricted | sudo tee -a /etc/apt/sources.list
          git clone https://github.com/rdp/ffmpeg-windows-build-helpers.git
          cd ffmpeg-windows-build-helpers
          sudo apt-get update
          sudo apt-get install subversion ragel curl texinfo g++ bison flex cvs yasm automake libtool autoconf gcc cmake git make pkg-config zlib1g-dev mercurial unzip pax nasm gperf autogen bzip2 autoconf-archive p7zip-full clang python3 python3-pip python3-setuptools python3-wheel ninja-build -y
          if [[ "$(lsb_release -rs)" == *"18.04"* ]];then sudo apt install python3-distutils -y ;fi
          if [[ "$(lsb_release -rs)" == *"20.04"* ]];then sudo apt install python-is-python3 -y ;fi
          sudo pip3 install meson ninja
      - name: Build ffmpeg
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 360
          max_attempts: 5
          retry_on: error
          command: |
            if [[ ${{ matrix.variant }} == *"lgpl"* ]];then GPL="n";else GPL="y";fi
            if [[ ${{ matrix.variant }} == *"static"* ]];then STATIC="y";else STATIC="n";fi
            if [[ ${{ matrix.variant }} == *"shared"* ]];then SHARED="y";else SHARED="n";fi
            if [[ ${{ matrix.version }} == *"none"* ]];then VERSION="";else VERSION="--ffmpeg-git-checkout-version=${{ matrix.version }}";fi
            cd ffmpeg-windows-build-helpers
            sed -i -e 's/--enable-libaribb24 //' ./cross_compile_ffmpeg.sh
            sed -i -e 's/--enable-libx264 --enable-libx265/--enable-libx264 --enable-libx265 --enable-libaribb24/' ./cross_compile_ffmpeg.sh
            ./cross_compile_ffmpeg.sh --build-ffmpeg-static=$STATIC --build-ffmpeg-shared=$SHARED $VERSION --enable-gpl=$GPL --compiler-flavors=${{ matrix.target }} --build-intel-qsv=y --build-amd-amf=y
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ffmpeg_build
          path: |
            ffmpeg-windows-build-helpers/sandbox/win*/ffmpeg*/bin/
            ffmpeg-windows-build-helpers/sandbox/win*/ffmpeg*/doc/*.html
            ffmpeg-windows-build-helpers/sandbox/win*/ffmpeg*/include/
            ffmpeg-windows-build-helpers/sandbox/win*/ffmpeg*/lib/
            ffmpeg-windows-build-helpers/sandbox/win*/ffmpeg*/*.exe
            ffmpeg-windows-build-helpers/sandbox/win*/ffmpeg*/COPYING*
          if-no-files-found: ignore
  publish_release:
    name: Publish release
    needs: build_ffmpeg
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ffmpeg_build
          path: ffmpeg_build
      - name: Zip upload files
        run: |
          cd ./ffmpeg_build/win32
          for FILE in ./*;do cd $(basename $FILE); zip -r ../../../win32_$(basename $FILE).zip ./; cd ../;done
          cd ../../
          cd ./ffmpeg_build/win64
          for FILE in ./* ;do cd $(basename $FILE); FILE_NAME="win64_$(basename $FILE).zip"; FILE_NAME=${FILENAME/ffmpeg_git_lgpl/ffmpeg_lgpl}; FILE_NAME=${FILENAME/ffmpeg_git/ffmpeg_gpl}; zip -r ../../../$FILE_NAME ./; cd ../;done
      - name: Prune old release
        run: |
          set -e
          git fetch --tags
          TAGS=( $(git tag -l "workflow-*") )
          for TAG in ${TAGS[@]}; do echo "Deleting ${TAG}"; hub release delete "${TAG}"; git tag -d "${TAG}"; done
          git push --tags --prune
      - name: Create Release
        run: |
          set -e
          NAME="FFmpeg $(date +'%Y-%m-%d')"
          TAGNAME="workflow-$(date +'%Y%m%d%H%M')"
          echo "Creating release tag: ${TAGNAME}"
          hub release create $(for zip in ./win*.zip; do echo -a $zip; done) -m "$NAME" -t "main" "$TAGNAME"
          echo "Created release tag: ${TAGNAME}"
        env:
          GITHUB_TOKEN: ${{ github.token }}